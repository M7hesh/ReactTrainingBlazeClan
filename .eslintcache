[{"E:\\reactapps\\src\\index.js":"1","E:\\reactapps\\src\\App.js":"2","E:\\reactapps\\src\\reportWebVitals.js":"3","E:\\reactapps\\src\\Componenets\\calciComponent.jsx":"4","E:\\reactapps\\src\\routingapp\\maincomponent.jsx":"5","E:\\reactapps\\src\\routingapp\\createempcomponent.jsx":"6","E:\\reactapps\\src\\routingapp\\createdeptcomponent.jsx":"7","E:\\reactapps\\src\\routingapp\\listdeptcomponent.jsx":"8","E:\\reactapps\\src\\routingapp\\listempcomponent.jsx":"9","E:\\reactapps\\src\\routingapp\\editempcomponent.jsx":"10","E:\\reactapps\\src\\routingapp\\editdeptcomponent.jsx":"11","E:\\reactapps\\src\\services\\httpservice.js":"12","E:\\reactapps\\src\\Componenets\\reusablecomponents\\validationSummary.jsx":"13","E:\\reactapps\\src\\Componenets\\employeeCompenent\\employeecomponent.jsx":"14","E:\\reactapps\\src\\models\\constants.js":"15","E:\\reactapps\\src\\models\\logic.js":"16","E:\\reactapps\\src\\Componenets\\reusablecomponents\\dropdowncomponent.jsx":"17","E:\\reactapps\\src\\Componenets\\reusablecomponents\\gridComponent.jsx":"18","E:\\reactapps\\src\\hooks\\useEffectAjax.jsx":"19","E:\\reactapps\\src\\hooks\\stateComponent.jsx":"20","E:\\reactapps\\src\\hooks\\tableContextComponent.jsx":"21","E:\\reactapps\\src\\hooks\\listcomponent.jsx":"22","E:\\reactapps\\src\\hooks\\tableContextComponentEvent.jsx":"23","E:\\reactapps\\src\\hooks\\dataContext.jsx":"24","E:\\reactapps\\src\\reduxapp\\mainreduxcomponent.jsx":"25","E:\\reactapps\\src\\reduxapp\\reducers\\reducers.jsx":"26","E:\\reactapps\\src\\reduxapp\\views\\createEmployeeComponenty.jsx":"27","E:\\reactapps\\src\\reduxapp\\views\\listEmployeesComponenty.jsx":"28","E:\\reactapps\\src\\reduxapp\\actions\\actions.jsx":"29","E:\\reactapps\\src\\reduxapp\\actions\\action2.jsx":"30","E:\\reactapps\\src\\sagaapp\\mainsagacomponent.jsx":"31","E:\\reactapps\\src\\sagaapp\\sagas\\sagaindex.jsx":"32","E:\\reactapps\\src\\sagaapp\\views\\readwritecomponent.jsx":"33","E:\\reactapps\\src\\sagaapp\\actions\\actions.jsx":"34","E:\\reactapps\\src\\sagaapp\\views\\listdatacomponent.jsx":"35","E:\\reactapps\\src\\sagaapp\\reducers\\reducers.jsx":"36","E:\\reactapps\\src\\hooks\\jwtclientcomponent.jsx":"37","E:\\reactapps\\src\\services\\secreservice.js":"38","E:\\reactapps\\src\\CrudProject\\maincomp.jsx":"39","E:\\reactapps\\src\\CrudProject\\listcomp.jsx":"40","E:\\reactapps\\src\\CrudProject\\editcomp.jsx":"41","E:\\reactapps\\src\\CrudProject\\createemp.jsx":"42","E:\\reactapps\\src\\CrudProject\\actions\\actions.jsx":"43","E:\\reactapps\\src\\CrudProject\\sagas\\sagaindex.jsx":"44","E:\\reactapps\\src\\CrudProject\\reducer\\reducer.jsx":"45","E:\\reactapps\\src\\CrudProject\\homecomp.jsx":"46","E:\\reactapps\\src\\CrudProject\\jwtClientComp.jsx":"47"},{"size":4364,"mtime":1612117215552,"results":"48","hashOfConfig":"49"},{"size":528,"mtime":499162500000,"results":"50","hashOfConfig":"49"},{"size":362,"mtime":499162500000,"results":"51","hashOfConfig":"49"},{"size":2848,"mtime":1611023994237,"results":"52","hashOfConfig":"49"},{"size":2447,"mtime":1611252566282,"results":"53","hashOfConfig":"49"},{"size":8370,"mtime":1611257223035,"results":"54","hashOfConfig":"49"},{"size":3469,"mtime":1611254197425,"results":"55","hashOfConfig":"49"},{"size":3437,"mtime":1611254266209,"results":"56","hashOfConfig":"49"},{"size":3516,"mtime":1611288291845,"results":"57","hashOfConfig":"49"},{"size":4752,"mtime":1611252238789,"results":"58","hashOfConfig":"49"},{"size":3938,"mtime":1611252431736,"results":"59","hashOfConfig":"49"},{"size":2063,"mtime":1611252098520,"results":"60","hashOfConfig":"49"},{"size":808,"mtime":1612009132288,"results":"61","hashOfConfig":"49"},{"size":12944,"mtime":1611482922471,"results":"62","hashOfConfig":"49"},{"size":159,"mtime":1611054007302,"results":"63","hashOfConfig":"49"},{"size":632,"mtime":1611169718146,"results":"64","hashOfConfig":"49"},{"size":1272,"mtime":1611054204676,"results":"65","hashOfConfig":"49"},{"size":2629,"mtime":1611169407199,"results":"66","hashOfConfig":"49"},{"size":2342,"mtime":1611542333096,"results":"67","hashOfConfig":"49"},{"size":3429,"mtime":1611513473185,"results":"68","hashOfConfig":"49"},{"size":2062,"mtime":1611542449543,"results":"69","hashOfConfig":"49"},{"size":501,"mtime":1611312193998,"results":"70","hashOfConfig":"49"},{"size":2185,"mtime":1611312573178,"results":"71","hashOfConfig":"49"},{"size":139,"mtime":1611312131883,"results":"72","hashOfConfig":"49"},{"size":1445,"mtime":1611681040785,"results":"73","hashOfConfig":"49"},{"size":2572,"mtime":1611675568610,"results":"74","hashOfConfig":"49"},{"size":1432,"mtime":1611568337792,"results":"75","hashOfConfig":"49"},{"size":1766,"mtime":1611683955651,"results":"76","hashOfConfig":"49"},{"size":366,"mtime":1611567819813,"results":"77","hashOfConfig":"49"},{"size":369,"mtime":1611682109042,"results":"78","hashOfConfig":"49"},{"size":415,"mtime":1611741521206,"results":"79","hashOfConfig":"49"},{"size":4826,"mtime":1611766716468,"results":"80","hashOfConfig":"49"},{"size":1897,"mtime":1611765208438,"results":"81","hashOfConfig":"49"},{"size":627,"mtime":1611766919071,"results":"82","hashOfConfig":"49"},{"size":685,"mtime":1611742267078,"results":"83","hashOfConfig":"49"},{"size":1720,"mtime":1611766984688,"results":"84","hashOfConfig":"49"},{"size":2597,"mtime":1611851669096,"results":"85","hashOfConfig":"49"},{"size":746,"mtime":1611825649948,"results":"86","hashOfConfig":"49"},{"size":1429,"mtime":1612107604588,"results":"87","hashOfConfig":"49"},{"size":4004,"mtime":1612107041256,"results":"88","hashOfConfig":"49"},{"size":4423,"mtime":1612108555458,"results":"89","hashOfConfig":"49"},{"size":8149,"mtime":1612117257689,"results":"90","hashOfConfig":"49"},{"size":750,"mtime":1612087713594,"results":"91","hashOfConfig":"49"},{"size":4832,"mtime":1612088539609,"results":"92","hashOfConfig":"49"},{"size":1316,"mtime":1612089374296,"results":"93","hashOfConfig":"49"},{"size":401,"mtime":1612117048351,"results":"94","hashOfConfig":"49"},{"size":4452,"mtime":1612116920445,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j3syv9",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"100"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"109"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"103"},{"filePath":"128","messages":"129","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"131"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"161"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"182"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"103"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\reactapps\\src\\index.js",[],"E:\\reactapps\\src\\App.js",[],["204","205"],"E:\\reactapps\\src\\reportWebVitals.js",[],["206","207"],"E:\\reactapps\\src\\Componenets\\calciComponent.jsx",["208"],"import { render } from '@testing-library/react';\r\nimport React, {Component} from 'react'\r\nimport \"./calcss.css\"\r\n\r\nclass CalciComponent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n            screen: '' };\r\n    };\r\n\r\nhandleInput=(evt)=>{\r\n    this.setState({screen: this.state.screen});\r\n}\r\n\r\nrender(){\r\n    return(\r\n        <div class=\"container\">\r\n            <input type=\"text\" name=\"screen\" id=\"screen\"\r\n            value={this.state.screen} onChange={this.handleInput.bind(this)}/>\r\n            <div class=\"calculator\">\r\n            <table>\r\n                <tr>\r\n                    <td><button class=\"operator\" onClick={this.handleInput.bind(this)}>C</button></td>\r\n                    <td><button class=\"operator\" onClick={this.handleInput.bind(this)}>+/-</button></td>\r\n                    <td><button class=\"operator\" onClick={this.handleInput.bind(this)}>/</button></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><button class=\"operator\" onClick={this.handleInput.bind(this)}>+</button></td>\r\n                    <td><button class=\"operator\" onClick={this.handleInput.bind(this)}>-</button></td>\r\n                    <td><button class=\"operator\" onClick={this.handleInput.bind(this)}>*</button></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><button class=\"number\" onClick={this.handleInput.bind(this)}>7</button></td>\r\n                    <td><button class=\"number\" onClick={this.handleInput.bind(this)}>8</button></td>\r\n                    <td><button class=\"number\" onClick={this.handleInput.bind(this)}>9</button></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><button class=\"number\" onClick={this.handleInput.bind(this)}>4</button></td>\r\n                    <td><button class=\"number\" onClick={this.handleInput.bind(this)}>5</button></td>\r\n                    <td><button class=\"number\" onClick={this.handleInput.bind(this)}>6</button></td>\r\n                </tr>\r\n                <tr>\r\n                    <td><button class=\"number\" onClick={this.handleInput.bind(this)}>1</button></td>\r\n                    <td><button class=\"number\" onClick={this.handleInput.bind(this)}>2</button></td>\r\n                    <td><button class=\"number\" onClick={this.handleInput.bind(this)}>3</button></td>\r\n                    \r\n                </tr>\r\n                <tr> \r\n                    <td><button class=\"number\" onClick={this.handleInput.bind(this)}>0</button></td>\r\n                    <td><button class=\"number\" onClick={this.handleInput.bind(this)}>.</button></td>\r\n                    <td><button class=\"operator\" id='' onClick={this.handleInput.bind(this)}>=</button></td>\r\n                </tr>  \r\n            </table>\r\n            </div>\r\n    </div>\r\n    );\r\n}\r\n}\r\nexport default CalciComponent;","E:\\reactapps\\src\\routingapp\\maincomponent.jsx",[],["209","210"],"E:\\reactapps\\src\\routingapp\\createempcomponent.jsx",["211","212","213"],"import React, { Component } from 'react';\r\nimport { Httpservice } from \"./../services/httpservice\";\r\nimport  ValidationSummaryComponent from \"./../../src/Componenets/reusablecomponents/validationSummary\";\r\n\r\nclass CreateEmployeeComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            EmpNo: 0,\r\n            EmpName: '',\r\n            Designation: '',\r\n            Salary: 0,\r\n            DeptNo: 0,\r\n\r\n            isEmpNoExists: false,\r\n            isEmpNameValid:true,\r\n            isFormValid:false,\r\n            errorMessages:[]\r\n        };\r\n        this.tempArr=[];\r\n        this.serv = new Httpservice(); //instance of class httpservice\r\n    }\r\n\r\n    validateForm=(name,value)=>{\r\n        \r\n        if(name === \"EmpNo\"){\r\n            if(parseInt(value) <= 0 || value.length >= 4){\r\n                    this.setState({isEmpNoValid:false});\r\n                    this.setState({isFormValid:false});\r\n                    if(!this.tempArr.includes('EmpNo is mandatory, must be +, must be max 4 in length')){\r\n                    this.tempArr.push('EmpNo is mandatory, must be +, must be max 4 in length');}\r\n                    this.setState({errorMessages:this.tempArr});\r\n                    console.log(this.tempArr);\r\n                    console.log(this.state.errorMessages);\r\n\r\n            } else {               \r\n               let b=-1;\r\n                this.tempArr.forEach((v,i)=>{\r\n                    if(v == \"EmpNo is mandatory, must be +, must be max 4 in length\"){\r\n                        b = i;\r\n                    }\r\n                });\r\n                if(b>=0){\r\n                this.tempArr.splice(b,1);\r\n               this.setState({errorMessages:this.tempArr});\r\n                }\r\n                \r\n                this.setState({isEmpNoValid:true});\r\n                this.setState({isFormValid:true});\r\n            }\r\n\r\n            // let eno = parseInt(value);\r\n            // let res = this.logic.getEmployees().filter((e,i)=>{\r\n            //         return e.EmpNo === eno;\r\n            // });\r\n            // if(res.length >0) {\r\n            //     this.setState({isEmpNoExists:true});\r\n            //     this.setState({isFormValid:false});\r\n            // } else {\r\n            //     this.setState({isEmpNoExists:false});\r\n            //     this.setState({isFormValid:true});\r\n            // }\r\n        } \r\n         \r\n        if(name === \"EmpName\"){\r\n            if(value.length < 3 || value.length > 20){\r\n                this.setState({isEmpNameValid:false});\r\n                this.setState({isFormValid:false});\r\n                if(!this.tempArr.includes(\"EmpName is mandatory, must be min 3 characters, must be max 20 characters  \")){\r\n                this.tempArr.push(\"EmpName is mandatory, must be min 3 characters, must be max 20 characters  \");}\r\n                    this.setState({errorMessages:this.tempArr});\r\n                    console.log(this.state.errorMessages);\r\n            } else {\r\n                    let a=-1;\r\n                    this.tempArr.forEach((v,i)=>{\r\n                        if(v == 'EmpName is mandatory, must be min 3 characters, must be max 20 characters  '){\r\n                        a = i;\r\n                        }\r\n            });\r\n            if(a>=0){\r\n               this.tempArr.splice(a,1);\r\n                this.setState({errorMessages:this.tempArr});\r\n            }\r\n                this.setState({isEmpNameValid:true});\r\n                this.setState({isFormValid:true});\r\n            }\r\n        }\r\n        \r\n        if(name === \"Salary\"){\r\n            if(parseInt(value) <= 0){\r\n                    this.setState({isEmpNoValid:false});\r\n                    this.setState({isFormValid:false});\r\n                    if(!this.tempArr.includes('Salary is mandatory, must be Positive  ')){\r\n                    this.tempArr.push('Salary is mandatory, must be Positive  ');}\r\n                    this.setState({errorMessages:this.tempArr});\r\n                    console.log(this.tempArr);\r\n                    console.log(this.state.errorMessages);\r\n\r\n            } else {               \r\n               let c=-1;\r\n                this.tempArr.forEach((v,i)=>{\r\n                    if(v == \"Salary is mandatory, must be Positive  \"){\r\n                        c = i;\r\n                    }\r\n                });\r\n                if(c>=0){\r\n                this.tempArr.splice(c,1);\r\n               this.setState({errorMessages:this.tempArr});\r\n                }\r\n                \r\n                this.setState({isEmpNoValid:true});\r\n                this.setState({isFormValid:true});\r\n            }\r\n    }\r\n}\r\n\r\n    handleChg(evt) {\r\n        this.setState({ [evt.target.name]: evt.target.value });\r\n        this.validateForm(evt.target.name, evt.target.value);\r\n    }\r\n\r\n    save() {\r\n        let emp = {\r\n            EmpNo: this.state.EmpNo,\r\n            EmpName: this.state.EmpName,\r\n            Designation: this.state.Designation,\r\n            Salary: this.state.Salary,\r\n            DeptNo: this.state.DeptNo\r\n        };\r\n        this.serv.postEmpData(emp).then((resp) => {\r\n            console.log(JSON.stringify(resp.data));\r\n            this.props.history.push('/');\r\n        }).catch((e) => {\r\n            this.setState({ errorMessage: `Error Occured at create emp comp save() ${e.Message}` })\r\n        });\r\n    }\r\n\r\n    clear() {\r\n        this.setState({ EmpNo: 0 });\r\n        this.setState({ EmpName: '' });\r\n        this.setState({ Designation: '' });\r\n        this.setState({ Salary: 0 });\r\n        this.setState({ DeptNo: 0 });\r\n    }\r\n\r\n    back(){\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('Create Component from Create employment is UnMounted');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <h2>Enter Employee Details</h2>\r\n                <div className=\"form-group\">\r\n                    <label>EmpNo</label>\r\n                    <input type=\"text\" className=\"form-control\"\r\n                        name=\"EmpNo\"\r\n                        value={this.state.EmpNo}\r\n                        onChange={this.handleChg.bind(this)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>EmpName</label>\r\n                    <input type=\"text\" className=\"form-control\"\r\n                        name=\"EmpName\"\r\n                        value={this.state.EmpName}\r\n                        onChange={this.handleChg.bind(this)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Designation</label>\r\n                    <input type=\"text\" className=\"form-control\"\r\n                        name=\"Designation\"\r\n                        value={this.state.Designation}\r\n                        onChange={this.handleChg.bind(this)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Salary</label>\r\n                    <input type=\"text\" className=\"form-control\"\r\n                        name=\"Salary\"\r\n                        value={this.state.Salary}\r\n                        onChange={this.handleChg.bind(this)}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>DeptNo</label>\r\n                    <input type=\"text\" className=\"form-control\"\r\n                        name=\"DeptNo\"\r\n                        value={this.state.DeptNo}\r\n                        onChange={this.handleChg.bind(this)}\r\n                    />\r\n                </div>\r\n                <input type=\"button\" value=\"Clear\" onClick={this.clear.bind(this)} className=\"btn btn-warning\" />\r\n                <input type=\"button\" value=\"Save\" onClick={this.save.bind(this)}\r\n                disabled={!(this.state.isFormValid && this.state.isEmpNameValid && this.state.isEmpNoValid)}\r\n                 className=\"btn btn-success\" />\r\n                <br/>\r\n                <input type=\"button\" value=\"Back\" onClick={this.back.bind(this)}  className=\"btn btn-info\"/>\r\n \r\n                <ValidationSummaryComponent messages={this.state.errorMessages}></ValidationSummaryComponent>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\nexport default CreateEmployeeComponent;\r\n","E:\\reactapps\\src\\routingapp\\createdeptcomponent.jsx",[],"E:\\reactapps\\src\\routingapp\\listdeptcomponent.jsx",[],"E:\\reactapps\\src\\routingapp\\listempcomponent.jsx",[],"E:\\reactapps\\src\\routingapp\\editempcomponent.jsx",[],"E:\\reactapps\\src\\routingapp\\editdeptcomponent.jsx",[],"E:\\reactapps\\src\\services\\httpservice.js",[],"E:\\reactapps\\src\\Componenets\\reusablecomponents\\validationSummary.jsx",["214","215"],"import React, { Component } from 'react';\r\nclass ValidationSummaryComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        if (this.props.messages === undefined || this.props.messages.length == 0) {\r\n            return (<div>All Valid</div>)\r\n        } else {\r\n            console.log(`messages length ${this.props.messages.length}`);\r\n            console.log(`messages:`, this.props.messages);\r\n\r\n            return (\r\n                <div>\r\n                    {\r\n                        this.props.messages.map((m, idx) => (\r\n                            <strong key={idx}><br></br>{m}</strong>\r\n                        ))\r\n                    }\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default ValidationSummaryComponent;","E:\\reactapps\\src\\Componenets\\employeeCompenent\\employeecomponent.jsx",["216","217","218","219"],"import React, { Component } from 'react';\r\nimport { Departments, Designations } from './../../models/constants';\r\nimport { Logic } from \"./../../models/logic\";\r\nimport DropDownComponent from './../reusablecomponents/dropdowncomponent';\r\nimport GridComponent from './../reusablecomponents/gridComponent';\r\nclass EmployeeComponent extends Component {\r\n    /**\r\n     * @param {any} props\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            EmpNo: 0,\r\n            EmpName: '',\r\n            DeptName: '',\r\n            Designation: '',\r\n            Salary: 0,\r\n            departments: Departments, // store constant array\r\n            designations: Designations, // store constant array\r\n            employees: [],\r\n            tableColumnHeaders: [],\r\n            sortKey: \"\",\r\n            sortOrder: \"asc\"\r\n            // employees: [\r\n            //     { EmpNo: 101, EmpName: 'Akash', DeptName: 'IT', Designation: 'Manager', Salary: 10000 },\r\n            //     { EmpNo: 102, EmpName: 'Mukesh', DeptName: 'HRD', Designation: 'Lead', Salary: 12000 },\r\n            //     { EmpNo: 103, EmpName: 'Abhay', DeptName: 'SALES', Designation: 'Manager', Salary: 30000 },\r\n            //     { EmpNo: 104, EmpName: 'Nandu', DeptName: 'TRAINING', Designation: 'Trainer', Salary: 17000 }\r\n            // ],\r\n        };\r\n        // define an instance of Logic class\r\n        this.logic = new Logic();\r\n        this.state.employees = this.logic.getEmployees();\r\n        this.state.tableColumnHeaders = Object.keys(this.state.employees[0]);\r\n    }\r\n\r\n\r\n    // use componentDidMount() method to perform all time consuming tasks\r\n    // e.g. AJAX Calls or all suc operation those are delayed because of\r\n    // some inconsistencies\r\n\r\n    // componentDidMount=()=>{\r\n    //     alert('In Component Did Mount');\r\n    //     // set the initial value of the state in Constructor thats why the render() method\r\n    //     // will take the initial value for employees and rendering HTML Table \r\n    //     this.state.employees =  this.logic.getEmployees();\r\n    //     alert(JSON.stringify(this.state.employees));\r\n    //     // read all object keys for 0th record in employees array\r\n    //     // this is the initial value for state so render() methdo will accept it\r\n    //     // for generating HTML DOM\r\n    //     if(this.state.employees.length >0){\r\n    //         this.state.tableColumnHeaders = Object.keys(this.state.employees[0]);\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    /**\r\n     * @param {{ target: { name: any; value: any; }; }} evt\r\n     */\r\n    handleValueChange = (evt) => {\r\n        this.setState({ [evt.target.name]: evt.target.value });\r\n    };\r\n\r\n    clear = () => {\r\n        this.setState({ EmpNo: 0 });\r\n        this.setState({ EmpName: '' });\r\n        this.setState({ DeptName: '' });\r\n        this.setState({ Designation: '' });\r\n        this.setState({ Salary: 0 });\r\n\r\n    };\r\n\r\n    save = () => {\r\n        let emp = {\r\n            EmpNo: this.state.EmpNo,\r\n            EmpName: this.state.EmpName,\r\n            DeptName: this.state.DeptName,\r\n            Designation: this.state.Designation,\r\n            Salary: this.state.Salary\r\n        };\r\n        // direct state update not allows with new values for state properties\r\n        // use setState()\r\n        // this.state.employees = emps;\r\n\r\n\r\n        // perform state mutation using setState()\r\n        // since the collection state properties \r\n        // delays the execution for update, pass the callback parameter \r\n        // to setState() method so that the the setState() will execute the callback \r\n        // and during that time the collection will be updated asynchronously\r\n        this.setState({ employees: [...this.state.employees, emp] });\r\n        //this.setState({employees: emps},()=>{});\r\n\r\n\r\n        console.log(`EMployees = ${JSON.stringify(this.state.employees)}`);\r\n    };\r\n\r\n    getSelectedEmp = (e) => {\r\n\r\n        this.setState({ EmpNo: e.EmpNo });\r\n        this.setState({ EmpName: e.EmpName });\r\n        this.setState({ DeptName: e.DeptName });\r\n        this.setState({ Designation: e.Designation });\r\n        this.setState({ Salary: e.Salary });\r\n    };\r\n    getSelectedDeptName = (val) => {\r\n        console.log(`DeptName ${val}`);\r\n        this.setState({ DeptName: val });\r\n    };\r\n\r\n    getSelectedDesignation = (val) => {\r\n        console.log(`Designation ${val}`);\r\n        this.setState({ Designation: val });\r\n    };\r\n\r\n    getSortKey = (val) => {\r\n        console.log(`Sort Key ${val}`);\r\n        this.setState({ sortKey: val });\r\n    };\r\n\r\n    setSort = (e) => {\r\n        this.setState({ sortOrder: e.target.value });\r\n    };\r\n\r\n    sortfunc = () => {\r\n        let tempEmp = [...this.state.employees];\r\n        tempEmp.sort((a,b) => {\r\n            if(a[sortKey] > b[sortKey]){\r\n                return 1;\r\n            }\r\n            else if(a[sortKey] < b[sortKey]){\r\n                return -1;\r\n            }\r\n            else{\r\n                return 0;\r\n            }\r\n        })\r\n        this.setState({ employees:[...tempEmp]});\r\n        console.log('in sort func: ', this.state.employees);\r\n    }\r\n\r\n    deleteRow = (index) => {\r\n        console.log('test index', index)\r\n        const temp = [...this.state.employees];\r\n        temp.splice(index, 1);\r\n        console.log('temp', temp);\r\n        this.setState({\r\n            employees: [...temp]\r\n        }, () => console.log('this.state.employees', this.state.employees));\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <h2>The Employee Infromation</h2>\r\n                <div className=\"form-group\">\r\n                    <label>EmpNo</label>\r\n                    <input type=\"text\" className=\"form-control\"\r\n                        name=\"EmpNo\"\r\n                        value={this.state.EmpNo}\r\n                        onChange={this.handleValueChange.bind(this)} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>EmpName</label>\r\n                    <input type=\"text\" className=\"form-control\"\r\n                        name=\"EmpName\"\r\n                        value={this.state.EmpName}\r\n                        onChange={this.handleValueChange.bind(this)} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>DeptName</label>\r\n                    {  /* generate the <option> in DOM Tree based on Collection \r\n                <select className=\"form-control\"\r\n                name=\"DeptName\"\r\n                value={this.state.DeptName}\r\n                 onChange={this.handleValueChange.bind(this)}>\r\n                   {\r\n                      \r\n                       this.state.departments.map((dept,index)=>(\r\n                           <option key={index} value={dept}>{dept}</option>\r\n                       ))\r\n                   }\r\n                 </select> */}\r\n                    <DropDownComponent\r\n                        stateData={this.state.DeptName}  //value\r\n                        dataSource={this.state.departments}  //options\r\n                        //value on change\r\n                        selectedValue={this.getSelectedDeptName.bind(this)}>\r\n                    </DropDownComponent>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label>Designation</label>\r\n\r\n                    {  /* generate the <option> in DOM Tree based on Collection \r\n                 <select className=\"form-control\"\r\n                name=\"Designation\"\r\n                value={this.state.Designation}\r\n                 onChange={this.handleValueChange.bind(this)}>\r\n                 {\r\n                   \r\n                    this.state.designations.map((desig,index)=>(\r\n                        <option key={index} value={desig}>{desig}</option>\r\n                    ))\r\n                }\r\n            </select> */}\r\n                    <DropDownComponent\r\n                        stateData={this.state.Designation}\r\n                        dataSource={this.state.designations}\r\n                        selectedValue={this.getSelectedDesignation.bind(this)}>\r\n                    </DropDownComponent></div>\r\n                <div className=\"form-group\">\r\n                    <label>Salarys</label>\r\n                    <input type=\"text\" className=\"form-control\"\r\n                        name=\"Salary\"\r\n                        value={this.state.Salary}\r\n                        onChange={this.handleValueChange.bind(this)} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"button\" value=\"Clear\" onClick={this.clear.bind(this)} className=\"btn btn-warning\" />\r\n                    <input type=\"button\" value=\"Save\" onClick={this.save.bind(this)} className=\"btn btn-success\" />\r\n                </div>\r\n                <hr />\r\n                <div> <DropDownComponent\r\n                    stateData={this.state.sortKey}\r\n                    dataSource={this.state.tableColumnHeaders}\r\n                    selectedValue={this.getSortKey.bind(this)}>\r\n                </DropDownComponent></div>\r\n\r\n\r\n\r\n                <div className=\"btn-group\">\r\n                    <input type=\"button\" value=\"asc\" onClick={this.sortfunc.bind(this)} className=\"btn btn-info\"\r\n                    flag={this.state.sortOrder===\"asc\"}/>Sort Asc</div>\r\n\r\n\r\n\r\n                {/* <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\r\n                    <label\r\n                        className={`btn btn-secondary ${this.state.sortOrder === \"asc\" ? \"active\" : \"\"\r\n                            }`}\r\n                    >\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"reverse\"\r\n                            id=\"option1\"\r\n                            value=\"asc\"\r\n                            checked={this.state.sortOrder === \"asc\"}\r\n                            onChange={this.setSort.bind(this)}\r\n                        />\r\n              Sort Ascending\r\n            </label>\r\n                    <label\r\n                        className={`btn btn-secondary ${this.state.sortOrder === \"dsc\" ? \"active\" : \"\"\r\n                            }`}\r\n                    >\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"reverse\"\r\n                            id=\"option2\"\r\n                            value=\"dsc\"\r\n                            checked={this.state.sortOrder === \"dsc\"}\r\n                            onChange={this.setSort.bind(this)}\r\n                        />\r\n              Sort Descending\r\n            </label>\r\n                </div> */}\r\n\r\n                {/* <h2>The Employee List</h2> */}\r\n                {/* Heard Code HTML Table */}\r\n                {/* <table className=\"table table-bordered table-striped table-dark\">\r\n          <thead>\r\n               <tr>\r\n                <th>EmpNo</th>\r\n                <th>EmpName</th>\r\n                <th>DeptName</th>\r\n                <th>Designation</th>\r\n                <th>Salary</th>\r\n               </tr> \r\n          </thead>\r\n          <tbody>\r\n            {\r\n                this.state.employees.map((emp,index)=>(\r\n                    <tr key={index}>\r\n                      <td>{emp.EmpNo}</td>\r\n                      <td>{emp.EmpName}</td>\r\n                      <td>{emp.DeptName}</td>\r\n                      <td>{emp.Designation}</td>\r\n                      <td>{emp.Salary}</td>\r\n                    </tr>\r\n                ))\r\n            }\r\n          </tbody>\r\n        </table>*/}\r\n                {/* Dynamic Table Generation */}\r\n                {/*  <h6>Dynamic Table</h6>\r\n         <table className=\"table table-bordered table-striped table-dark\">\r\n            <thead>\r\n              <tr>\r\n               {\r\n                   this.state.tableColumnHeaders.map((col,idx)=>(\r\n                       <th key={idx}>{col}</th>\r\n                   ))\r\n               }\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n             {\r\n                this.state.employees.map((emp,index)=>(\r\n                    <tr key={index} onClick={()=>this.getSelectedEmp(emp)}>\r\n                    {\r\n                        this.state.tableColumnHeaders.map((col,idx)=>(\r\n                            <td key={idx}>{emp[col]}</td>\r\n                        ))\r\n                    }\r\n                  \r\n                    </tr>\r\n                ))\r\n             }\r\n            </tbody>\r\n            </table> */}\r\n                <br />\r\n                <GridComponent\r\n                    dataSource={this.state.employees}\r\n                    canDelete={true}\r\n                    emitSelectedRow={this.getSelectedEmp.bind(this)}\r\n                    handleDelete={this.deleteRow}>\r\n                </GridComponent>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default EmployeeComponent;",["220","221"],"E:\\reactapps\\src\\models\\constants.js",[],"E:\\reactapps\\src\\models\\logic.js",[],"E:\\reactapps\\src\\Componenets\\reusablecomponents\\dropdowncomponent.jsx",[],"E:\\reactapps\\src\\Componenets\\reusablecomponents\\gridComponent.jsx",["222"],"import React, { Component } from 'react';\r\nclass GridComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  \r\n            tableColumnHeaders: Object.keys(this.props.dataSource[0]) //returns an array of a given object's own enumerable property names, iterated in the same order that a normal loop would.\r\n        };\r\n    }\r\n\r\n    rowClick=(e)=>{\r\n        // the props function\r\n        // accept the selected row value when the\r\n        if(e !== undefined) {\r\n            this.props.emitSelectedRow(e);\r\n\r\n        }   \r\n    }\r\n\r\n    handleDelete=(e,index)=>{\r\n        e.stopPropagation();\r\n        console.log('index', index);\r\n        // the props function\r\n        // accept the selected row value when the\r\n        if(index !== undefined) {\r\n            this.props.handleDelete(index);\r\n\r\n        }   \r\n    }\r\n\r\n\r\n    render() { \r\n        console.log('this.props.dataSource', this.props.dataSource)\r\n         if(this.props.dataSource === undefined || this.props.dataSource.length == 0 ){\r\n             return (<div>No Records</div>);\r\n         } else {\r\n             return(\r\n                 <div>\r\n                 <h2>Grid Component</h2>\r\n                 <table className=\"table table-bordered table-striped table-danger\">\r\n                   <thead>\r\n                        <tr>\r\n                          {\r\n                              this.state.tableColumnHeaders.map((col,idx)=>(\r\n                                  <th key={idx}>{col}</th>\r\n                              ))\r\n                          }\r\n                        </tr>\r\n                   </thead>\r\n                   <tbody>\r\n                        {\r\n                            this.props.dataSource.map((row,index)=>(\r\n                                <tr key={index} onClick={()=>this.rowClick(row)}>\r\n                                   {\r\n                                       this.state.tableColumnHeaders.map((col,idx)=>(\r\n                                           <td key={idx}>{row[col]}</td>\r\n                                       ))\r\n                                   } \r\n                                   <td hidden={!this.props.canDelete}>\r\n                                     <input type=\"button\" value=\"delete\" onClick={(e)=> this.handleDelete(e,index)} className=\"btn btn-warning\"/>\r\n                                   </td>\r\n                                </tr>\r\n                            ))\r\n                        }  \r\n                   </tbody>\r\n                 </table>\r\n                 </div>\r\n             );\r\n         }\r\n    }\r\n}\r\n \r\nexport default GridComponent;","E:\\reactapps\\src\\hooks\\useEffectAjax.jsx",["223"],"import React, { useEffect, useState, createContext } from 'react';\r\nimport { Httpservice } from \"./../services/httpservice\";\r\nimport TableContextComponent from './tableContextComponent';\r\n\r\nexport const EmpContext = createContext();\r\n\r\nconst UseEffectAjaxComponent = () => {\r\n\r\n    const [depts, addDept] = useState([]);\r\n    const [emps, addEmp] = useState([]);\r\n    const serv = new Httpservice();\r\n    \r\n\r\n    // useEffect(()=>{\r\n    //     serv.getData().then((response)=>{\r\n    //         // data will be added in array\r\n    //         addDept(response.data);\r\n    //     }).catch((error)=>{\r\n    //         console.log(`Error Occured ${error}`);\r\n    //     });\r\n    // },[]); // --> empty array reprsents all state properties for the current component\r\n\r\n    // return(\r\n    //     <div className=\"container\">\r\n    //     <h2>Dept: Use Effect for Ajax call during the component loading</h2>\r\n    //         {JSON.stringify(depts)}    \r\n    //     </div>\r\n    // );\r\n\r\n    useEffect(() => {\r\n        serv.getData().then((response) => {\r\n            // data will be added in array\r\n            addDept(response.data.response);\r\n        }).catch((error) => {\r\n            console.log(`Error Occured ${error}`);\r\n        });\r\n\r\n        serv.getEmpData().then((resp) => {\r\n            // data will be added in array\r\n            addEmp(resp.data.response);\r\n        }).catch((error) => {\r\n            console.log(`Error Occured ${error}`);\r\n        });\r\n    }, []); // --> empty array reprsents all state properties for the current component\r\n\r\n    // return(\r\n    //     <div className=\"container\">\r\n    //     <h2>Emp: Use Effect for Ajax call during the component loading</h2>\r\n    //         {JSON.stringify(emps)}    \r\n    //     </div>\r\n    // );\r\n\r\n    return (\r\n        <div>\r\n            {/* <p>{JSON.stringify(depts)}</p>\r\n            <br></br>\r\n            {JSON.stringify(emps)}\r\n            <br></br> */}\r\n            \r\n            <EmpContext.Provider value={depts}>\r\n                    <TableContextComponent></TableContextComponent>            \r\n            </EmpContext.Provider>\r\n            \r\n            <EmpContext.Provider value={emps}>\r\n                    <TableContextComponent></TableContextComponent>\r\n            </EmpContext.Provider>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nexport default UseEffectAjaxComponent;",["224","225"],"E:\\reactapps\\src\\hooks\\stateComponent.jsx",[],"E:\\reactapps\\src\\hooks\\tableContextComponent.jsx",[],"E:\\reactapps\\src\\hooks\\listcomponent.jsx",[],"E:\\reactapps\\src\\hooks\\tableContextComponentEvent.jsx",[],"E:\\reactapps\\src\\hooks\\dataContext.jsx",[],"E:\\reactapps\\src\\reduxapp\\mainreduxcomponent.jsx",[],"E:\\reactapps\\src\\reduxapp\\reducers\\reducers.jsx",[],"E:\\reactapps\\src\\reduxapp\\views\\createEmployeeComponenty.jsx",[],["226","227"],"E:\\reactapps\\src\\reduxapp\\views\\listEmployeesComponenty.jsx",["228"],"E:\\reactapps\\src\\reduxapp\\actions\\actions.jsx",[],"E:\\reactapps\\src\\reduxapp\\actions\\action2.jsx",[],"E:\\reactapps\\src\\sagaapp\\mainsagacomponent.jsx",[],"E:\\reactapps\\src\\sagaapp\\sagas\\sagaindex.jsx",[],"E:\\reactapps\\src\\sagaapp\\views\\readwritecomponent.jsx",[],"E:\\reactapps\\src\\sagaapp\\actions\\actions.jsx",[],"E:\\reactapps\\src\\sagaapp\\views\\listdatacomponent.jsx",[],"E:\\reactapps\\src\\sagaapp\\reducers\\reducers.jsx",[],"E:\\reactapps\\src\\hooks\\jwtclientcomponent.jsx",[],["229","230"],"E:\\reactapps\\src\\services\\secreservice.js",[],"E:\\reactapps\\src\\CrudProject\\maincomp.jsx",[],"E:\\reactapps\\src\\CrudProject\\listcomp.jsx",["231"],"import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Httpservice } from \"./../services/httpservice\";\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\nimport { deleteEmployee } from './actions/actions';\r\n\r\nconst ListComp = (props) => {\r\n    const [employees, updateEmployees] = useState([]);\r\n    let serv = new Httpservice();\r\n    // Object.keys(this.state.employees[0])\r\n\r\n    useEffect(() => {\r\n        serv.getEmpData().then((resp) => {\r\n            updateEmployees(resp.data.response)\r\n            //console.log(employees);\r\n        }).catch((e) => {\r\n            console.log(`Error occured at useEffect in Listemp comp: ${e.message}`)\r\n        });\r\n    }, []);\r\n\r\n    const deleteEmpRecord = (id) => {\r\n        if(window.confirm(`Delete Employee: EmpNo ${id}?`)){\r\n        props.delEmp(id);\r\n        window.location.reload(); //refresh\r\n        }\r\n    }\r\n\r\n    const back = () => {\r\n        props.history.push('/');\r\n    }\r\n\r\n    if (employees.length === 0) {\r\n        return (<div>No records</div>);\r\n    } else {\r\n        let headers = Object.keys(employees[0]);\r\n        return (\r\n            <div className=\"container\">\r\n                <h2 align='center'>Employee List</h2>\r\n                <table className=\"table table-bordered table-striped\">\r\n                    <thead>\r\n                        <tr>\r\n                            {/* <th>EmpNo</th>\r\n                            <th>EmpName</th>\r\n                            <th>Designation</th>\r\n                            <th>Salary</th>\r\n                            <th>DeptNo</th>\r\n                            <th></th>\r\n                            <th></th> */}\r\n                            { \r\n                            //Dynamic method\r\n                            headers.map((col,id) => (\r\n                                <th key={id}>{col}</th>\r\n                            ))\r\n                            }\r\n                            <th>Edit</th>\r\n                            <th>Delete</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            employees.map((v, i) => (\r\n                                <tr key={i}>\r\n                                    {/* <td>{v.EmpNo}</td>\r\n                                    <td>{v.EmpName}</td>\r\n                                    <td>{v.Designation}</td>\r\n                                    <td>{v.Salary}</td>\r\n                                    <td>{v.DeptNo}</td>\r\n                                    <td> */}\r\n                                    { \r\n                                    //Dynamic method\r\n                                        headers.map((col,id) => (\r\n                                            <td key={id}>{v[col]}</td> //v.col doesn't work\r\n                                        ))\r\n                                    }\r\n                                    <td>\r\n                                        <button className=\"btn btn-success\">\r\n                                            <Link to={`/editemp/${v.EmpNo}`}>Edit</Link>\r\n                                        </button>\r\n                                    </td>\r\n                                    <td>\r\n                                        <input type=\"button\" value=\"Delete\" className=\"btn btn-warning\"\r\n                                            onClick={() => { deleteEmpRecord(v.EmpNo) }} />\r\n                                    </td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n                <input type=\"button\" value=\"Back\" onClick={back} className=\"btn btn-info\" />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    // prop : actual action creator\r\n    delEmp: deleteEmployee // action for DELETE_EMPLOYEE\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ListComp);\r\n","E:\\reactapps\\src\\CrudProject\\editcomp.jsx",["232"],"E:\\reactapps\\src\\CrudProject\\createemp.jsx",[],"E:\\reactapps\\src\\CrudProject\\actions\\actions.jsx",[],"E:\\reactapps\\src\\CrudProject\\sagas\\sagaindex.jsx",[],"E:\\reactapps\\src\\CrudProject\\reducer\\reducer.jsx",[],"E:\\reactapps\\src\\CrudProject\\homecomp.jsx",[],"E:\\reactapps\\src\\CrudProject\\jwtClientComp.jsx",[],{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","replacedBy":"236"},{"ruleId":"233","replacedBy":"237"},{"ruleId":"235","replacedBy":"238"},{"ruleId":"239","severity":1,"message":"240","line":1,"column":10,"nodeType":"241","messageId":"242","endLine":1,"endColumn":16},{"ruleId":"233","replacedBy":"243"},{"ruleId":"235","replacedBy":"244"},{"ruleId":"245","severity":1,"message":"246","line":39,"column":26,"nodeType":"247","messageId":"248","endLine":39,"endColumn":28},{"ruleId":"245","severity":1,"message":"246","line":76,"column":30,"nodeType":"247","messageId":"248","endLine":76,"endColumn":32},{"ruleId":"245","severity":1,"message":"246","line":102,"column":26,"nodeType":"247","messageId":"248","endLine":102,"endColumn":28},{"ruleId":"249","severity":1,"message":"250","line":3,"column":5,"nodeType":"251","messageId":"252","endLine":5,"endColumn":6},{"ruleId":"245","severity":1,"message":"246","line":7,"column":77,"nodeType":"247","messageId":"248","endLine":7,"endColumn":79},{"ruleId":"253","severity":2,"message":"254","line":129,"column":18,"nodeType":"241","messageId":"255","endLine":129,"endColumn":25},{"ruleId":"253","severity":2,"message":"254","line":129,"column":31,"nodeType":"241","messageId":"255","endLine":129,"endColumn":38},{"ruleId":"253","severity":2,"message":"254","line":132,"column":23,"nodeType":"241","messageId":"255","endLine":132,"endColumn":30},{"ruleId":"253","severity":2,"message":"254","line":132,"column":36,"nodeType":"241","messageId":"255","endLine":132,"endColumn":43},{"ruleId":"233","replacedBy":"256"},{"ruleId":"235","replacedBy":"257"},{"ruleId":"245","severity":1,"message":"246","line":33,"column":81,"nodeType":"247","messageId":"248","endLine":33,"endColumn":83},{"ruleId":"258","severity":1,"message":"259","line":44,"column":8,"nodeType":"260","endLine":44,"endColumn":10,"suggestions":"261"},{"ruleId":"233","replacedBy":"262"},{"ruleId":"235","replacedBy":"263"},{"ruleId":"233","replacedBy":"264"},{"ruleId":"235","replacedBy":"265"},{"ruleId":"239","severity":1,"message":"266","line":3,"column":23,"nodeType":"241","messageId":"242","endLine":3,"endColumn":34},{"ruleId":"233","replacedBy":"267"},{"ruleId":"235","replacedBy":"268"},{"ruleId":"258","severity":1,"message":"259","line":20,"column":8,"nodeType":"260","endLine":20,"endColumn":10,"suggestions":"269"},{"ruleId":"258","severity":1,"message":"270","line":28,"column":8,"nodeType":"260","endLine":28,"endColumn":10,"suggestions":"271"},"no-native-reassign",["272"],"no-negated-in-lhs",["273"],["272"],["273"],"no-unused-vars","'render' is defined but never used.","Identifier","unusedVar",["272"],["273"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-undef","'sortKey' is not defined.","undef",["272"],["273"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'serv'. Either include it or remove the dependency array.","ArrayExpression",["274"],["272"],["273"],["272"],["273"],"'useSelector' is defined but never used.",["272"],["273"],["275"],"React Hook useEffect has missing dependencies: 'props.match.params.id' and 'serv'. Either include them or remove the dependency array.",["276"],"no-global-assign","no-unsafe-negation",{"desc":"277","fix":"278"},{"desc":"277","fix":"279"},{"desc":"280","fix":"281"},"Update the dependencies array to be: [serv]",{"range":"282","text":"283"},{"range":"284","text":"283"},"Update the dependencies array to be: [props.match.params.id, serv]",{"range":"285","text":"286"},[1463,1465],"[serv]",[725,727],[1067,1069],"[props.match.params.id, serv]"]